import os
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
import requests
import ccxt # <-- –ù–æ–≤–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
# –í–ê–ñ–õ–ò–í–û: –û—Ç—Ä–∏–º–∞–π—Ç–µ —Å–≤—ñ–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∫–ª—é—á –Ω–∞ https://min-api.cryptocompare.com/pricing
CRYPTOCOMPARE_API_KEY = os.environ.get('CRYPTOCOMPARE_API_KEY', 'YOUR_API_KEY_HERE')

# --- –§—É–Ω–∫—Ü—ñ—ó-–ø–æ–º—ñ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ---

def fetch_price_data(symbol):
    """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –ø—Ä–æ —Ü—ñ–Ω—É –∑ –±—ñ—Ä–∂—ñ Binance –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ccxt."""
    try:
        exchange = ccxt.binance()
        # –§–æ—Ä–º—É—î–º–æ –ø–∞—Ä—É, –∑–∞–∑–≤–∏—á–∞–π —Ü–µ —Å–∏–º–≤–æ–ª –¥–æ USDT
        ticker = f'{symbol.upper()}/USDT'
        data = exchange.fetch_ticker(ticker)
        return {
            "price": data['last'],
            "change_24h": data['percentage']
        }
    except (ccxt.BadSymbol, ccxt.NetworkError, Exception) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol}: {e}")
        return None

def fetch_latest_news():
    """–û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ CryptoCompare API."""
    try:
        url = f"https://min-api.cryptocompare.com/data/v2/news/?lang=EN&api_key={CRYPTOCOMPARE_API_KEY}"
        response = requests.get(url)
        response.raise_for_status() # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ HTTP –ø–æ–º–∏–ª–∫–∏
        news_data = response.json()['Data']
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 3 –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        return news_data[:3]
    except (requests.RequestException, KeyError) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: {e}")
        return None

def fetch_fear_and_greed_index():
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ."""
    try:
        # API –≤—ñ–¥ alternative.me, –ø–æ–≤–µ—Ä—Ç–∞—î 1 –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
        url = "https://api.alternative.me/fng/?limit=1"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()['data'][0]
        return {
            "value": data['value'],
            "classification": data['value_classification']
        }
    except (requests.RequestException, KeyError) as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ: {e}")
        return None

# --- –û–Ω–æ–≤–ª–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–º–∞–Ω–¥ ---

def start(update, context):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start."""
    welcome_text = (
        "–í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–π–¥–µ—Ä –±–æ—Ç.\n"
        "–Ø –∞–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–∫–æ–≤—ñ –¥–∞–Ω—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ, —â–æ–± –Ω–∞–¥–∞–≤–∞—Ç–∏ –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n"
        "/price `BTC` - –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä. /price ETH, /price SOL).\n"
        "/news - –û—Ç—Ä–∏–º–∞—Ç–∏ 3 –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ä–∏–Ω–∫—É.\n"
        "/digest - –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Ä–∏–Ω–∫—É.\n"
    )
    update.message.reply_text(welcome_text, parse_mode=telegram.ParseMode.MARKDOWN)

def get_news(update, context):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–æ–±—ñ—Ä–∫—É —Ä–µ–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω."""
    update.message.reply_text("‚è≥ *–®—É–∫–∞—é —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏...*")
    news_items = fetch_latest_news()

    if not news_items:
        update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    formatted_news = []
    for item in news_items:
        formatted_news.append(f"üì∞ *{item['title']}*\n[–ß–∏—Ç–∞—Ç–∏ –¥–∞–ª—ñ]({item['url']})")

    update.message.reply_text("\n\n".join(formatted_news), parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)

def get_price(update, context):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ä–µ–∞–ª—å–Ω—É —Ü—ñ–Ω—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏."""
    if not context.args:
        update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏.\n*–ü—Ä–∏–∫–ª–∞–¥:* `/price BTC`", parse_mode=telegram.ParseMode.MARKDOWN)
        return

    symbol = context.args[0].upper()
    update.message.reply_text(f"‚è≥ *–ó–∞–ø–∏—Ç—É—é —Ü—ñ–Ω—É –¥–ª—è {symbol}...*")
    price_data = fetch_price_data(symbol)

    if not price_data:
        update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è *{symbol}*. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–∏–º–≤–æ–ª –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π (–Ω–∞–ø—Ä. ETH, SOL, DOGE).", parse_mode=telegram.ParseMode.MARKDOWN)
        return

    price = price_data['price']
    change = price_data['change_24h']
    sign = "üìà" if change >= 0 else "üìâ"
    
    message = f"*{symbol}/USDT*\n\n*–¶—ñ–Ω–∞:* `${price:,.4f}`\n*–ó–º—ñ–Ω–∞ –∑–∞ 24–≥:* {sign} `{change:.2f}%`"
    update.message.reply_text(message, parse_mode=telegram.ParseMode.MARKDOWN)

def get_digest(update, context):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö."""
    update.message.reply_text("‚è≥ *–ê–Ω–∞–ª—ñ–∑—É—é —Ä–∏–Ω–æ–∫ —Ç–∞ –≥–æ—Ç—É—é –¥–∞–π–¥–∂–µ—Å—Ç...*")
    
    # 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ
    btc_data = fetch_price_data("BTC")
    fng_data = fetch_fear_and_greed_index()
    news_data = fetch_latest_news()

    # 2. –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–∞–π–¥–∂–µ—Å—Ç—É
    digest_parts = ["*üìä –©–æ–¥–µ–Ω–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç:*"]

    # –ë–ª–æ–∫ –ø—Ä–æ Bitcoin
    if btc_data:
        sign = "üìà" if btc_data['change_24h'] >= 0 else "üìâ"
        btc_part = (
            f"\n*–ì–æ–ª–æ–≤–Ω–∏–π –∞–∫—Ç–∏–≤ (BTC):*\n"
            f"–¶—ñ–Ω–∞: `${btc_data['price']:,.2f}`\n"
            f"–ó–º—ñ–Ω–∞ –∑–∞ 24–≥: {sign} `{btc_data['change_24h']:.2f}%`"
        )
        digest_parts.append(btc_part)

    # –ë–ª–æ–∫ –ø—Ä–æ –Ω–∞—Å—Ç—Ä–æ—ó —Ä–∏–Ω–∫—É
    if fng_data:
        fng_part = (
            f"\n*–ù–∞—Å—Ç—Ä–æ—ó —Ä–∏–Ω–∫—É (–Ü–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö—É —Ç–∞ –∂–∞–¥—ñ–±–Ω–æ—Å—Ç—ñ):*\n"
            f"–ó–Ω–∞—á–µ–Ω–Ω—è: *{fng_data['value']}* –∑ 100\n"
            f"–û—Ü—ñ–Ω–∫–∞: *{fng_data['classification']}*"
        )
        digest_parts.append(fng_part)

    # –ë–ª–æ–∫ –∑ –∫–ª—é—á–æ–≤–æ—é –Ω–æ–≤–∏–Ω–æ—é
    if news_data:
        top_news = news_data[0]
        news_part = f"\n*–ö–ª—é—á–æ–≤–∞ –Ω–æ–≤–∏–Ω–∞:*\n[{top_news['title']}]({top_news['url']})"
        digest_parts.append(news_part)

    # 3. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if len(digest_parts) == 1: # –Ø–∫—â–æ –∂–æ–¥–Ω—ñ –¥–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
        update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—ñ–±—Ä–∞—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    else:
        update.message.reply_text("\n".join(digest_parts), parse_mode=telegram.ParseMode.MARKDOWN, disable_web_page_preview=True)


def unknown(update, context):
    """–û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥."""
    update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ —Ü—é –∫–æ–º–∞–Ω–¥—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥.")

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞ ---

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    token = os.environ.get('TELEGRAM_TOKEN')
    if not token:
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_TOKEN.")
        return
    
    if CRYPTOCOMPARE_API_KEY == 'YOUR_API_KEY_HERE':
        print("–£–í–ê–ì–ê: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ CRYPTOCOMPARE_API_KEY. –§—É–Ω–∫—Ü—ñ—ó –Ω–æ–≤–∏–Ω —Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç—É –º–æ–∂—É—Ç—å –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏.")
        print("–û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á –Ω–∞ https://min-api.cryptocompare.com —Ç–∞ –¥–æ–¥–∞–π—Ç–µ –π–æ–≥–æ.")


    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("news", get_news))
    dp.add_handler(CommandHandler("price", get_price))
    dp.add_handler(CommandHandler("digest", get_digest))
    dp.add_handler(MessageHandler(Filters.command, unknown))

    updater.start_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏...")
    updater.idle()

if __name__ == '__main__':
    main()
